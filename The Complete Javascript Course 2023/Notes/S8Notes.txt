L87 Section Intro

L88 Section Roadmap

L89 An High-Level Overview of JavaScript
    JavaScript is a high-level, prototype-based, object-oriented, multi-paradigm, interpreted or just-in-time compiled, dynamic, single threaded, garbage-collected programming language with first-class functions and a non-blocking event loop concurrency model

    Topics:
        High-level:
            Low-Level = Developer has to manage resources manually

            High-level = Developer does NOT have to worry, everything happens automatically thanks to abstraction

            Low level languages like C can always be optimized better thanks to direct resource management

        Garbage-collected:
            Garbage collection is an algorithm that cleans old unused memory so we don't have to

        Interpreted or just-in-time compiled:
            Computer only understands binary/machine code

            Human-readable JS code is an abstraction over 0s and 1s

            Compilation - Conversion to machine code, which happens inside the JS engine

        Multi-paradigm:
            Paradigm - An approach and mindset of structuring code, which will direct your coding style

            1. Procedural programming - Code is organized in a linear way
            2. Object-oriented programming (OOP)
            3. Functional programming (FP)

            Imperative vs Declarative

        Proto-based object-orientated:
            Almost everything in JS are objects (other than primitive data types)


            For example, arrays are created from an array blueprint called Prototypes, which contain all the array methods and is inherited from the prototype

        First-class functions:
            In a language with first-class functions, functions are simply treated as variables. We can pass them into other functions, and return them from functions. (ex Passing functions into .addEventListener())

        Dynamic:
            Dynamically-typed language:
                No data type definitions. Types becomes known at runtime.

                Data type of variable is automically changed.

                JavaScript variant with strong typing is TypeScript


        Single-threaded:
            Concurrency model - How the JS engine handles multiple tasks happening at the same time.

            JS runs in one single thread (a set of instructions executed by the CPU), so it can only do one thing at a time.

            Sounds like it would block the single thread with long-running tasks. However, we want non-blocking behavior. This is achieved by using an event loop: 

        Non-blocking event loop:
            Event loop - takes long running tasks, executed them in the "background", and puts them abck in the main thread once they are finished.