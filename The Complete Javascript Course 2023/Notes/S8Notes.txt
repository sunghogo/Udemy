L87 Section Intro


L88 Section Roadmap


L89 An High-Level Overview of JavaScript
    JavaScript is a high-level, prototype-based, object-oriented, multi-paradigm, interpreted or just-in-time compiled, dynamic, single threaded, garbage-collected programming language with first-class functions and a non-blocking event loop concurrency model

    Topics:
        High-level:
            Low-Level = Developer has to manage resources manually

            High-level = Developer does NOT have to worry, everything happens automatically thanks to abstraction

            Low level languages like C can always be optimized better thanks to direct resource management

        Garbage-collected:
            Garbage collection is an algorithm that cleans old unused memory so we don't have to

        Interpreted or just-in-time compiled:
            Computer only understands binary/machine code

            Human-readable JS code is an abstraction over 0s and 1s

            Compilation - Conversion to machine code, which happens inside the JS engine

        Multi-paradigm:
            Paradigm - An approach and mindset of structuring code, which will direct your coding style

            1. Procedural programming - Code is organized in a linear way
            2. Object-oriented programming (OOP)
            3. Functional programming (FP)

            Imperative vs Declarative

        Proto-based object-orientated:
            Almost everything in JS are objects (other than primitive data types)


            For example, arrays are created from an array blueprint called Prototypes, which contain all the array methods and is inherited from the prototype

        First-class functions:
            In a language with first-class functions, functions are simply treated as variables. We can pass them into other functions, and return them from functions. (ex Passing functions into .addEventListener())

        Dynamic:
            Dynamically-typed language:
                No data type definitions. Types becomes known at runtime.

                Data type of variable is automically changed.

                JavaScript variant with strong typing is TypeScript

        Single-threaded:
            Concurrency model - How the JS engine handles multiple tasks happening at the same time.

            JS runs in one single thread (a set of instructions executed by the CPU), so it can only do one thing at a time.

            Sounds like it would block the single thread with long-running tasks. However, we want non-blocking behavior. This is achieved by using an event loop: 

        Non-blocking event loop:
            Event loop - takes long running tasks, executed them in the "background", and puts them back in the main thread once they are finished.


L90 The JavaScript Engine and Runtime
    JS Engine - A program that executes JS code

    Many JS Engines, but the most well known is Google's V8 Engine that powers chrome and Node.js

    Any JS Engine contains:
        1. Call Stack - Is where your code is executed using execution context
        2. Heap - Where all the objects are stored in memory

    Compilation vs Interpretation:
        Compilation - Entire code is converted into machine code at once, and written to a binary file that can be executed by a computer
            Soure Code -Compilation-> Portable file: machine code -Execution(can happen later)-> Program running

        Interpretation - Interpreter runs through the source code and executes it line by line
            Source Code -Conversion and Execution Line By Line-> Program Running
        
        JS used to be an interpreted language, but now modern engines use a mix of compilation and interpretation

        Just-in-time (JIT) compilation - Entire code is converted into machine code at once, then executed immediately
            Source Code -Compilation-> Machine Code(Not a portable file) -Execution-> Program running.

    Modern Just-In-Time Compilation of JavaScript:
        As JS code enters the JS engine:
            1. Parsing - To read the code:
                Code is parsed into a data structure called the Abstract Syntax Tree (AST). Each line of code is split up into pieces that is meaningful to the language, and then saving it to the tree in a structured way.

                Also checks for syntax errors, and the resulting tree will later be used to generate machine code 

                This AST is not related to the DOM

            2. Compilation - Takes the generated AST and compiles it into machine code (JIT compilation)

            3. Execution - This machine code is executed immediately (Happens in the Call Stack)

            4. Optimization - Very unoptimized version of machine code in the beginning, then this code is optimized and recompiled in the background during the already running program execution, later executing the optimized code as it is recompiled+

    JavaScript Runtime:
        JS Runtime in the Browser - Contaienr including all the things we need to use JS (in this case in the browser):
            1. The heart of the JS Runtime is the JS Engine
            2. Web APIs - Functionalities provided to/not part of the engine, accessible on the global window object
            3. Callback Queue - This is a data structure that contains all the callback functions that are ready to be executed (ex. callback frunction from DOM event listener):
                As a event happens, the callback function will be called.

                The callback function is put on the callback queue, and when the call stack becomes empty, the callback function is passed onto the stack for execution. This process is known as 'event loop'

                Event loop is essential for non-blocking concurrency model

        JS Runtime in node.js - Similar to JS Runtime in browser, but has access to C++ Bindings & Thread Pool instead of Web APIs


L91 Execution Contexts and The Call Stack
    What is an Execution Context:
        Execution Context - Environment in which a piece of JavaScript is executed. Stores all the necessary information for some code to be executed.

        Exactly one global execution (EC):
            Default context, created for code that is not inside any function (top-level)

        One execution context per function: 
            For each function call, a new execution context is created. All together make up the call stack.

        After Compilation, Execution process starts:
            1. Creation of global execution context (for top-level code - code that is not inside a function)

            2. Execution of top-level code (inside global EC)

            3. Execution of functions and waiting for callbacks (functions)

    What's Inside Execution Context? - Generated during "creation phase", right before execution
        1. Variable Environment:
            let, const, and var declarations
            Functions
            arguments object (All the arguments passed into the function that the current execution context belongs to; An array hold each passed arguments)

        2. Scope Chain:
            Consists of references to variables that are located outside the current function

        3. this keyword

        Arrow functions do NOT have arguments object and this keyword, allowing them to use the arguments object and this keyword to their regular function parents

        None of the values become known during the creation phase, only during the execution phase

    The Call Stack - "Place" in memory where execution contexts get stacked on top of each other, to keep track of where we are in execution:
        Execution context on top of stack is what is currently running

        Once an execution context is finished and popped off, it executes the execution context in the call stack before it

        Execution context is paused as soon as another execution context is pushed on top of the stack; This is because JS only have one thread of execution

        Global Execution Context is only finished and popped off when the browser is exited and closed, otherwise waiting for callback functions


L92 Scope and The Scope Chain
        Scoping - How our program's variables are organized and accessed.

        JS has Lexical Scoping - Scoping is controlled by placement of funtions and blocks in the code

        Scope - Space or environment in which a certain variable is declared (variable environment in case of functions). There is a global scope, function scope, and block scope

        Scope of a variable - Region of our code whwre a certain variable can be accessed

        The 3 Types of Scope:
            Global Scope:
                Outside of any function or block
                Variables declared in global scope are accessible everywhere 

            Fucntion Scope:
                Variables are accessible only inside function, NOT outside
                Also called "local scope"

            Block Scope (ES6):
                Variables are accessible only inside block (block scoped)
                HOWEVER, this only applies to let and const variables!
                Functions are also block scoped (only in strict mode)