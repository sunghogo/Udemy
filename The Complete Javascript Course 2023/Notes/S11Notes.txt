L140 Section Intro


L141 Section Roadmap


L142 Simple Array Methods
    Methods are simply functions we can call on objects / that are attached to objects

    .slice('start index', 'end index') array method extracts and returns a new ARRAY containing that slice WITHOUT mutating the original array:
        The end parameter does not have to be specified

        The end paramter is NOT included 

        A negative number as the start extracts that number of elements starting from the end

        A negative number as the end parameter extracts from the start index to the end excluding the specified number of elements

        Can also not pass any parameters to create a shallow copy of the array

    .splice('start index', 'delete count') array method extracts and returns a new ARRAY containing that slice while MUTATING the original array:
        The original array will contain the leftovers

        Most used case is to .splice(-1) to get rid of the last element

    .reverse() array method reverses and MUTATES the original array

    .concat('array 2') method concatenates two arrays into a single array WITHOUT mutating the original arrays

    .join('separator substring') returns a string that contains the contents of the array that has its commas replaced by the separator substring
        No parameters keeps the commas without whitespace

    From  from previous sections:
        .push(), 
        .pop(), 
        .unshift(), 
        .shift(), 
        .indexOf(), 
        .includes()


L143 The new at Method
    .at('index paramter') (ES2022) string/array method lets us access array elements as an alternative to bracket notation:
        If the index paramter is a negative parameter, it starts accessing from the end of the array

        Also useful for method chaining


L144 Looping Arrays: forEach
    So far, you can use for/while and for-of loops to iterate through arrays

    .forEach('callback function'('current element', 'current index', 'entire array')) array method (ES5/ES2009) is a higher-order function that requires a callback function:
        The current element in each iteration is passed as an argument to the callback function

        The index is passed as the second paramenter, and the entire array is passed as the third paramter (ORDER matters)

    Important differences between for/for-of and .forEach():
        .forEach() CANNOT use break and continue keywords, for loops can

        .forEach() can be slightly cleaner and easier to utilize


L145 forEach With Maps and Sets
    .forEach('callback function'('value', 'key', 'map')) also works with maps and sets (but NOT objects):
        In sets, the keys are the same as the values since sets has no order and has unique values (and developers wanted to keep the syntax consistent) so you can use '_' for the second paramter

    In JS, '_' signifies a throw away variable that is unecessary


L146 PROJECT: "Bankist" App


L147 Creating DOM Elements
    It is not good practice to start writing code in the global context, better to encapsulate it inside a function

    Also, should pass data into a function instead of having the function work with a global variable
    
    Template literals are great for making html template strings

    .insertAdjacentHTML("'position'", 'html string') is a DOM menthod that inserts HTML string after the specified position:
        'beforebegin' - outside above the element opening tag
        'afterbegin' - inside right after the element opening tag 
        'beforeend' - inside right before element end tag
        'afterend' - outside right below element end tag
    
    .innerHTML is a DOM property that returns the entire HTML including the tags
    
    .textContent is a DOM property that returns only the text contained inside the HTML