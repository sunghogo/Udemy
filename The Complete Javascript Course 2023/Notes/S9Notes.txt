L101 Section Intro:
    Will cover:
        1. Built-in data structures like objects, maps, and arrays
        2. Modern ES6+ operators like destructuring nad optional chaining
        3. How to work with strings

L102 Section Roadmap


L103 Destructuring Arrays:
    Destructuring (ES6) - Way of unpacking of values in an array or object into separate variables. (Break a complex data structure down into a simpler data structure like a variable)

    In VS Code, you can duplicate selection
    
    Simple way to destructure an array:
        const ['var 1', var 2', etc...] = 'array name'

        Destructuring assignment assigns leftmost variables starting from index 0

        Can also skip an index with an empty space like this:
            const ['var 1', ,'var 2'] = 'array name'

    Destructuring also allows us to easily switch variable values:
        ['var 1', 'var 2'] = ['var 2', 'var 1']

    You can destructure arrays returned from functions

    You can also destructure nested arrays used nested destructuring:
            const ['var 1', [var 2', 'var 3'], etc...] = 'array name'

    We can set default values for the variables when we are destructuring/extracting them:
        const ['var 1' = 'default value 1', 'var 2' = 'default value 2', etc...] = 'array name'

        
        Useful for when we do not know the length of the array

    Destructuring an array for a non existant index returns an undefined


L104 Destructuring Objects
    Similar to destructuring arrays, except key differences:
        const {'property 1', property 2', etc...} = 'object name'

        Objects are unordered so do not need to skip, however need to specify the exact property name as the variable name

        Extremely useful for dealing with API call results

    Can specify variable names in destructuring objects:
        const {'property 1': 'variable 1', property 2': 'variable 2', etc...} = 'object name'

    Cam also specify default values in destructuring objects:
        const {'property 1' = 'default value 1', property 2' = 'default value 2', etc...} = 'object name'

    Mutating variables with object destructuring:
        We can't just do:
            {'property 1', 'property 2'} = 'object name'
        since JS expects this to be a code block, and we cannot assign to a code block as it will create a SyntaxError

        To propertly reassign variables using destructuring objects, need to wrap the entire statement in parentheses:
            ({'property 1', 'property 2'} = 'object name')

    Nested Objects:
        Similarly, we can specify and destructure nested objects:
            const {'nested object name' : {'property name 1', 'property name 2', etc...} = 'object name'

    You can define objects as parameters for a function:
        This is useful for functions with many multiple parameters as you don't have to keep track of the parameter order, and destructure the object right away in the function parameters

        'object name' = {'property 1', 'property 2', etc..}
        'function name' = function ({'property 1', 'property 2', etc..}) {
            "function body"
        }
        'function name' ({'property 1', 'property 2', etc..});


L105 The Spread Operator (...):
    We can use the spread operator to expand an array into all its elements, unpacking all the array elements at once

    Spread Operator (ES6) - Takes all the values out of an array, and writes the values individually in sequence
        ...'array name'