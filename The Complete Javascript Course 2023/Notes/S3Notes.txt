L32 Activating Strict Mode
    Activate strict mode to write more secure JS code by writing this string at the beginning:
    'use strict'; 

    This string has to be the very first statement otherwise it will not be activated; comments are allowed

    We can also activate strict mode for a specific block or function

    Strict mode forbids us to do certain things, and will create visible errors in certain situations leading to more secure code

    Checks for variable definitions

    Prevents short list of variable names that are reserved for features that may be added to the language later; Similar to prventing the use of keywords as variable names

L33 Functions
    Function is reusable chunks of code that allows us to write more maintainable code; like variables but for whole blocks of code

    Variables hold a value, functions hold one or more complete lines of code

    'function' keyword

    function name(inputs) {
        "function buddy"
    }

    Using/Executing the function is also called invoking, running, or calling the function

    We can pass and return data to/from a function

    Parameters are like input variables that are specific only to this function, and are defined once the function is called

    'return' keyword to return values from the function that we can store in variables

    When invoking a function, we pass in real values that will be assigned to the parameters, which are called the arguments of a function

    Specifying arguments or writing functions that are not called will not be executed

    Functions that do not return a value will return a 'undefined' value

    Clean Code: DRY Principle - Don't Repeat Yourself

    console.log(), Number(), String() are built-in functions

    Once again, you can type variable names in the developer console to see their values

L34 Function Declarations vs. Expressions
    Function declarations using the function keyword and a name

    Function expressions are using the function keyword without a name, also called an "anonymous function" 

    Parameters are like the placeholders for the inputs of a function, while the arguments are the actual values

    You can store functions in a variable as they are expressions that produce a value; you can then call the function using the variable name

    The main difference between function declarations and expressions is that you can call function declarations before they are defined in the code but not with expressions - this is due to a process called hoisting

    Both have their uses, and based on developer's preference

L35 Arrow Functions
    Arrow function is a special form function expression that is shorter and faster to write

    parameter => "Function Buddy"

    No need for curly braces and return happens implicitly; excellent for simple one liners

    For more than one lines, need curly braces and explicit return statement for that block

    For more than one arguments, need parteneses around the arguments

    Arrow functions lose their advantage in longer functions

    Arrow functions do not get a so called 'this' keyword

    In VSCode, to wrap word in parentheses/other characters:
    Select word, () / ' / " / {} / etc.

    In VSCode, to scroll to beginning/end line:
    CTRL + home/end

    In VSCode, to switch tabs:
    CTRL + pg up/ pg dn

L36 Functions Calling Other Functions
    Functions can call other functions, which is useful for the DRY principle and cleaner/maintainable code

    Function Data/Control Flow for example: 
    2 is passed to apples paramenter of fruitProcessor(), which then passed to fruit paramenter of cutFruitPieces(), and storedi n variable applePieces

    Similarly, 3 is passed to oranges of both parameters, and stored into variable orangePieces
